import pickle
import numpy as np
from analysis.feature_extractor import *
import scipy.spatial
class Matcher(object):
    '''Matcher class

    Used to take vector data from the pickle file generated by batch image feature extraction 
    and to compare the cosine distance between this vector data and vector data of another image.

    ''' 

    def __init__(self, pickled_db_path="features.pck"):
        '''
        Initializes the class
        @param pickled_db_path string
        Opens the batch feature extraction pickle file 
        and generates a matrix of feature data for each 
        image in the file.
        '''
        with open(pickled_db_path, 'rb') as fp:
            self.data = pickle.load(fp)
        self.names = []
        self.matrix = []
        #Get image files, store their names 
        # in one list and their features in another
        for k, v in self.data.items():
            self.names.append(k)
            self.matrix.append(v)
        self.matrix = np.array(self.matrix)
        self.names = np.array(self.names)

    def cos_cdist(self, vector):
        '''
        Calculates cosine distance
        @param vector numpyArray
        @return float
        Takes a vector and calculates the cosine distance 
        between the parameter vector and the self vector 
        '''
        # getting cosine distance between search image and images database
        v = vector.reshape(1, -1)
        return scipy.spatial.distance.cdist(self.matrix, v, 'cosine').reshape(-1)

    def match(self, image_path, topn=1):
        '''
        Matches an image to another image using cosine distance
        @param image_path string
        @param topn int (number of matches found in the pickle file since 
        we are looking for the highest match we set this to 1)
        @return tuples of image paths and image distances
        Takes a vector and calculates the cosine distance 
        between the parameter vector and the self vector 
        '''
        features = extract_features(image_path)
        img_distances = self.cos_cdist(features)
        # getting top 1 records
        nearest_ids = np.argsort(img_distances)[:topn].tolist()
        nearest_img_paths = self.names[nearest_ids].tolist()

        return nearest_img_paths, img_distances[nearest_ids].tolist()
